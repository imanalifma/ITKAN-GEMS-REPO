package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.util.ElapsedTime;

@Autonomous
public class ITKAN_GEMS_AUTON extends LinearOpMode {

  private DcMotor backLeft;
  private DcMotor backRight;
  private DcMotor frontLeft;
  private DcMotor frontRight;
  private DcMotor armMotor;
  private DcMotor foreArmMotor;
  private DcMotor liftMotor;
  private Servo claw;
  private Servo intake;

  
  //Convert from the counts per revolution of the encoder to counts per inch
  static final double HD_TICKS_PER_REV = 28;
  static final double DRIVE_GEAR_REDUCTION = 20.15293;
  static final double WHEEL_CIRCUMFERENCE_MM = 90 * Math.PI;
  static final double DRIVE_COUNTS_PER_MM = (HD_COUNTS_PER_REV * DRIVE_GEAR_REDUCTION) / WHEEL_CIRCUMFERENCE_MM;
  static final double DRIVE_COUNTS_PER_IN = DRIVE_COUNTS_PER_MM * 25.4;
  
  //Create elapsed time variable and an instance of elapsed time
  private ElapsedTime     runtime = new ElapsedTime();
  
  // Drive function with 3 parameters
  private void drive(double power, double leftInches, double rightInches) {
    int rightTarget;
    int leftTarget;

    if (opModeIsActive()) {
     // Create target positions
      rightTarget = frontRight.getCurrentPosition() + (int)(rightInches * DRIVE_COUNTS_PER_IN);
      leftTarget = frontLeft.getCurrentPosition() + (int)(leftInches * DRIVE_COUNTS_PER_IN);
      
      // set target position
      frontLeft.setTargetPosition(leftTarget);
      frontRight.setTargetPosition(rightTarget);
      backLeft.setTargetPosition(leftTarget);
      backRight.setTargetPosition(rightTarget);
      
      //switch to run to position mode
      frontLeft.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      frontRight.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      backLeft.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      backRight.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      
      //run to position at the desiginated power
      frontLeft.setPower(power);
      frontRight.setPower(power);
      backLeft.setPower(power);
      backRight.setPower(power);
      
      // wait until both motors are no longer busy running to position
      double startTime = runtime.seconds();
        

      while (opModeIsActive() && (frontLeft.isBusy() || frontRight.isBusy() || backLeft.isBusy() || backRight.isBusy())) {
            
      if (runtime.seconds() - startTime > 10) { // Timeout after 10 seconds
                break;
            } 
        }
      
      
      // set motor power back to 0
      frontLeft.setPower(0);
      frontRight.setPower(0);
      backLeft.setPower(0);
      backRight.setPower(0);
    }
  }


  @Override
  public void runOpMode() {
    backLeft = hardwareMap.get(DcMotor.class, "bl");
    backRight = hardwareMap.get(DcMotor.class, "br");
    frontLeft = hardwareMap.get(DcMotor.class, "fl");
    frontRight = hardwareMap.get(DcMotor.class, "fr");
    armMotor = hardwareMap.get(DcMotor.class, "arm");
    foreArmMotor = hardwareMap.get(DcMotor.class, "forearm");
    liftMotor = hardwareMap.get(DcMotor.class, "lift");
    claw = hardwareMap.get(Servo.class, "claw");
    intake = hardwareMap.get(Servo.class, "intake");
 
    // Set motor directions
    frontRight.setDirection(DcMotorSimple.Direction.FORWARD);
    backRight.setDirection(DcMotorSimple.Direction.FORWARD);
    frontLeft.setDirection(DcMotorSimple.Direction.FORWARD);
    backLeft.setDirection(DcMotorSimple.Direction.REVERSE);

    // Set zero power behavior
    armMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    foreArmMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    liftMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    backLeft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    backRight.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    frontLeft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    frontRight.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

    
    waitForStart();
    //if (opModeIsActive()) {
      
       //segment 1
      drive(0.1, 10, 10);
      
      
      //runtime.reset(); // reset elapsed time timer
      
      //segment 2 - lift arm, drive to shipping hub, outtake freight
     /* while (opModeIsActive() && runtime.seconds() <= 7) {
        
        //lift arm and hold
        Arm.setTargetPosition(120);
        Arm.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        Arm.setPower(0.3);*/
        
        //drive forward for 1 second
        /*while (runtime.seconds() > 2 && runtime.seconds() <= 3) {
          drive(0.4, 4, 4);
        }
        
        //run intake
        while (runtime.seconds() > 4 && runtime.seconds() <= 7) {
          Intake.setPower(-0.6);
        }
      
      // turn off arm and intake
      /*Arm.setPower(0);
      Intake.setPower(0);
      
      //segment 3 - reverse to get better angle 
      drive(0.7, -15, -30);
      
      //segment 4 - drive into warehouse
      drive(0.1, 90, 90);
    }*/
 // }
}
}
