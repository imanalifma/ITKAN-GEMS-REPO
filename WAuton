package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;

@Autonomous
public class WAuton extends LinearOpMode {
    private DcMotor backLeft, backRight, frontLeft, frontRight, armMotor;
    private Servo claw, intake;

    @Override
    public void runOpMode() {
        // Initialize hardware
        backLeft = hardwareMap.get(DcMotor.class, "bl");
        backRight = hardwareMap.get(DcMotor.class, "br");
        frontLeft = hardwareMap.get(DcMotor.class, "fl");
        frontRight = hardwareMap.get(DcMotor.class, "fr");
        armMotor = hardwareMap.get(DcMotor.class, "leftarm");
        claw = hardwareMap.get(Servo.class, "claw");
        intake = hardwareMap.get(Servo.class, "intake");

        // Set motor directions
        frontRight.setDirection(DcMotor.Direction.REVERSE);
        backRight.setDirection(DcMotor.Direction.REVERSE);
        frontLeft.setDirection(DcMotor.Direction.FORWARD);
        backLeft.setDirection(DcMotor.Direction.FORWARD);
        armMotor.setDirection(DcMotor.Direction.REVERSE);

        // Set zero power behavior
        armMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        backLeft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        backRight.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        frontLeft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        frontRight.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
         claw.setPosition(0.8);
        waitForStart();

        if (opModeIsActive()) {
            // Step 1: Close claw
            claw.setPosition(0.8);
        

            // Step 2: Raise arm to -980 and hold position
            moveArm(-980);
            intake.setPosition(1);
            holdArmPosition();
            sleep(100);

            // Step 3: Move forward for 800 encoder ticks
            moveForward(590);
            sleep(100);

            // Step 4: Lower arm to -800 and hold position
            moveArm(-800);
            holdArmPosition();
            sleep(100);

            // Step 5: Move backward for 100 encoder ticks
            moveBackward(200);
            sleep(300);

            // Step 6: Open claw
            claw.setPosition(0.1);
            sleep(300);
            
             intake.setPosition(0);
              moveArm(-2425);
            holdArmPosition();
            // Step 7: Strafe right
            strafeRight(-1050);
            sleep(300);
             moveForward(400);
            sleep(100);
            intake.setPosition(1);
            sleep(300);
            moveArm(-2750);
            moveBackward(257);
            
              claw.setPosition(0.8);
              sleep(100);
              moveForward(240);
        }
    }

    private void moveArm(int targetPosition) {
        armMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        armMotor.setTargetPosition(targetPosition);
        armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        armMotor.setPower(0.5);
        while (opModeIsActive() && armMotor.isBusy()) {
            telemetry.addData("Arm Position", armMotor.getCurrentPosition());
            telemetry.update();
        }
        armMotor.setPower(0.1); // Apply slight power to hold position
    }

    private void holdArmPosition() {
        armMotor.setPower(0.1); // Maintain position with slight power
    }

    private void moveForward(int ticks) {
        setTargetPosition(ticks, ticks, ticks, ticks);
        setPower(0.5);
        waitForMotors();
    }

    private void moveBackward(int ticks) {
        setTargetPosition(-ticks, -ticks, -ticks, -ticks);
        setPower(0.5);
        waitForMotors();
    }

    private void strafeRight(int ticks) {
        setTargetPosition(-ticks, ticks, ticks, -ticks);
        setPower(0.5);
        waitForMotors();
    }

    private void setTargetPosition(int fl, int fr, int bl, int br) {
        frontLeft.setTargetPosition(frontLeft.getCurrentPosition() + fl);
        frontRight.setTargetPosition(frontRight.getCurrentPosition() + fr);
        backLeft.setTargetPosition(backLeft.getCurrentPosition() + bl);
        backRight.setTargetPosition(backRight.getCurrentPosition() + br);

        frontLeft.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        frontRight.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        backLeft.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        backRight.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    }

    private void setPower(double power) {
        frontLeft.setPower(power);
        frontRight.setPower(power);
        backLeft.setPower(power);
        backRight.setPower(power);
    }

    private void waitForMotors() {
        while (opModeIsActive() && (frontLeft.isBusy() || frontRight.isBusy() || backLeft.isBusy() || backRight.isBusy())) {
            telemetry.addData("Front Left", frontLeft.getCurrentPosition());
            telemetry.addData("Front Right", frontRight.getCurrentPosition());
            telemetry.addData("Back Left", backLeft.getCurrentPosition());
            telemetry.addData("Back Right", backRight.getCurrentPosition());
            telemetry.update();
        }
        setPower(0);
    }
}
