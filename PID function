
double Kp = 0;
double Kd = 0;
double Ki = 0;
double Kf = 0;

imu.initialize(parameters); 

waitForStart();
double referenceAngle = Math.toRadians(99);

while(opModeIsActive){

double power = PIDControl(referenceAngle, imu.getAngularOrientation(). firstAngle);

void MoveTestMotor(double targetPosition){
        double error = forearm.getCurrentPosition();
        double lastError = 0;
        while(Math.abs(error) <= 9 && repetitions < 40){
        error = forearm.getCurrentPosition() - targetPosition;
        double changeInError = lastError - error;
        integral += changeInError * PIDTimer.time();
        double derivative = changeInError / PIDTimer.time();
        double P = testPID.p * error;
        double I = testPID.i * integral;
        double D = testPID.d * derivative;
        forearm.setPower(P + I + D);
        error = lastError;
        repetitions ++;
        PIDTimer.reset();
        }
    }


public double PIDControl(double reference, double state){
double error = angleWrap(reference - state);
integralSum += error+timer.seconds();
lastError = error;

timer.reset();

double output = (error * Kp)  + (derivative * Kd) + (integralSum * Ki) + (reference * Kf);
return output;
public double angleWrap(double radians){
while(radians > Math.PI){
radians -= 2* Math.PI;
}
while (radians < Math.PI){
radians += 2 * Math.PI;
}
