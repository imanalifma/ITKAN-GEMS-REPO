package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.Gamepad;

@TeleOp
public class Gems_Test extends LinearOpMode {
    private DcMotor backLeft;
    private DcMotor backRight;
    private DcMotor frontLeft;
    private DcMotor frontRight;
    private DcMotor armMotor;
    private Servo claw;
    private Servo intake;
    private Servo armServo;
    private int armTarget = 0;
    double joystick;
    boolean isPressed;
    boolean isDown = true;
    boolean lastCycle = false, currCycle = false;

    @Override
    public void runOpMode()  {
        // Initialize hardware
        backLeft = hardwareMap.get(DcMotor.class, "bl");
        backRight = hardwareMap.get(DcMotor.class, "br");
        frontLeft = hardwareMap.get(DcMotor.class, "fl");
        frontRight = hardwareMap.get(DcMotor.class, "fr");
        armMotor = hardwareMap.get(DcMotor.class, "leftarm");
        claw = hardwareMap.get(Servo.class, "claw");
        intake = hardwareMap.get(Servo.class, "intake");
        

        // Set motor directions
        frontRight.setDirection(DcMotorSimple.Direction.FORWARD);
        backRight.setDirection(DcMotorSimple.Direction.FORWARD);
        frontLeft.setDirection(DcMotorSimple.Direction.FORWARD);
        backLeft.setDirection(DcMotorSimple.Direction.REVERSE);
        armMotor.setDirection(DcMotorSimple.Direction.REVERSE);
        // Set zero power behavior
        armMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        backLeft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        backRight.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        frontLeft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        frontRight.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        //armMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        //armMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
       // armMotor.setTargetPosition(0);
        //armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        //armMotor.setPower(0.5);
        
        
        armMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        armMotor.setTargetPosition(0);
        armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        armMotor.setPower(0.5);
        //Line 58 commented and line 64 added by NA on 1/15/2025
        armMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        double basepower = 0.7;
        double lefty1, leftx1, rightx1;

        waitForStart();

        while (opModeIsActive()) {
            // Gamepad control inputs
            lefty1 = gamepad1.left_stick_y;
            leftx1 = gamepad1.left_stick_x;
            rightx1 = gamepad1.right_stick_x;
            
            // Arm control
            if (gamepad2.right_bumper) {
               /* armTarget = 0; // Home position
               // armMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
                armMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
                armMotor.setTargetPosition(armTarget);
                armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                armMotor.setPower(0.5);*/
                move_arm(0);
                intake.setPosition(0);
             
            if (gamepad2.dpad_down) {
                armTarget = -125; // Home position
               // armMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
                armMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
                armMotor.setTargetPosition(armTarget);
                armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                armMotor.setPower(0.5);
                intake.setPosition(0.9);
                
                //armMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
            } else if (gamepad2.dpad_left) {
                armTarget = -1700; // Position 1
               // armMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
                 armMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
                armMotor.setTargetPosition(armTarget);
                armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                armMotor.setPower(0.5);
               // armMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
            } else if (gamepad2.dpad_right) {
                armTarget = -1227; // Position 2 -1980
                //armMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
                 armMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
                armMotor.setTargetPosition(armTarget);
                armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                armMotor.setPower(0.5);
               // armMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
            }
            if (gamepad2.dpad_up) {
                armTarget = -650; //Position 3
               // armMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
                 armMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
                armMotor.setTargetPosition(armTarget);
                armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                armMotor.setPower(0.5);
                //armMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
                //intake.setPosition(0.2);
            }

            // Base movement logic
            if (gamepad1.right_bumper) {
                basepower = 0.5; // Low speed mode
            } else {
                basepower = 0.7; // Full power driving
            }
            
            frontLeft.setPower((basepower * -lefty1) + (basepower * leftx1) + basepower * rightx1);
            backRight.setPower((basepower * lefty1) - (basepower * leftx1) + basepower * rightx1);
            frontRight.setPower((basepower * lefty1) + (basepower * leftx1) + basepower * rightx1);
            backLeft.setPower((basepower * lefty1) - (basepower * leftx1) + basepower * -rightx1);


            // Arm Motor control
            

            // Intake control 
           
            
            if (gamepad2.y) {
                move_wrist("home");
            } else if (gamepad2.x) {
                move_wrist("back");
            } else if (gamepad2.b) {
                move_wrist("grab");
            } else if (gamepad2.a) {
                move_wrist("bucket");
            }

            // Claw control 
            lastCycle = currCycle;
            currCycle = gamepad2.right_bumper;
            telemetry.addData("Claw Last", lastCycle);
            telemetry.addData("Claw", currCycle);
            if (currCycle && !lastCycle) {
                isDown = !isDown;
                if (isDown) {
                    claw.setPosition(0.1);  
                } else {
                    claw.setPosition(1);
                }
            }

            // Send telemetry data
            telemetry.addData("Arm Position", armMotor.getCurrentPosition());
            telemetry.addData("Arm Target Position", armTarget);
            telemetry.addData("Base Power", basepower);
            telemetry.addData("Low Power Mode", gamepad1.right_bumper);
            telemetry.update();
        }
    }

    public void move_wrist(String pos) {
        if (pos.equals("home")) {
            intake.setPosition(1);
            telemetry.addData("p", "home");
        } else if (pos.equals("back")) {
            intake.setPosition(0);
            telemetry.addData("p", "back");
        } else if (pos.equals("grab")) {
            intake.setPosition(0.5);
            telemetry.addData("p", "grab");
        } else if (pos.equals("bucket")) {
            intake.setPosition(0.8);
            telemetry.addData("p", "bucket");
        }
    }
  public void move_arm(int armTarget) {
         armMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        armMotor.setTargetPosition(armTarget);
        armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        armMotor.setPower(0.5);
       
}
