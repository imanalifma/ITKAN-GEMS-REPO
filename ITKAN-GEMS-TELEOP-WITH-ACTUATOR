package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.Gamepad;

@TeleOp
public class ITKAN_GEMS_TELEOP_WITH_ACTUATOR extends LinearOpMode {
    private DcMotor backLeft;
    private DcMotor backRight;
    private DcMotor frontLeft;
    private DcMotor frontRight;
    private DcMotor rightArmMotor, leftArmMotor;
    private DcMotor foreArmMotor;
    private DcMotor liftMotor;
    private Servo claw;
    private Servo intake;
    private int armTarget = 0;
    int foreArmTarget = 0;
    int liftTarget = 0;
    double joystick;
    boolean isPressed;
    boolean isDown = true;
    boolean lastCycle = false, currCycle = false;

    final double ARM_COLLAPSED_INTO_ROBOT = 0;
    final double ARM_COLLECT = 1980;
    final double ARM_PARALLEL_COLLECT = 1365;
    final double ARM_SCORE_SAMPLE_IN_LOW = 650;
    
    final double INTAKE_COLLECT = 0;
    final double INTAKE_OFF = 0;
    final double INTAKE_DEPOSIT = 0;

    final double WRIST_FOLDED_IN = 0;
    final double WRIST_FOLDED_OUT = 1;

    final double CLAW_CLOSED = 0;
    final double CLAW_OPEN = 1;

    @Override
    public void runOpMode() throws InterruptedException {
        // Initialize hardware
        backLeft = hardwareMap.get(DcMotor.class, "bl");
        backRight = hardwareMap.get(DcMotor.class, "br");
        frontLeft = hardwareMap.get(DcMotor.class, "fl");
        frontRight = hardwareMap.get(DcMotor.class, "fr");
        rightArmMotor = hardwareMap.get(DcMotor.class, "rightarm");
        leftArmMotor = hardwareMap.get(DcMotor.class, "leftarm");
        foreArmMotor = hardwareMap.get(DcMotor.class, "forearm");
        liftMotor = hardwareMap.get(DcMotor.class, "lift");
        claw = hardwareMap.get(Servo.class, "claw");
        intake = hardwareMap.get(Servo.class, "intake");
        

        // Set motor directions
        frontRight.setDirection(DcMotorSimple.Direction.FORWARD);
        backRight.setDirection(DcMotorSimple.Direction.FORWARD);
        frontLeft.setDirection(DcMotorSimple.Direction.FORWARD);
        backLeft.setDirection(DcMotorSimple.Direction.REVERSE);

        // Set zero power behavior
        rightArmMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        leftArmMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        foreArmMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        liftMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        backLeft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        backRight.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        frontLeft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        frontRight.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);


        ////armMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        rightArmMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        rightArmMotor.setTargetPosition(0);
        rightArmMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        rightArmMotor.setPower(0.5);
        
        rightArmMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        
        leftArmMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        leftArmMotor.setTargetPosition(0);
        leftArmMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftArmMotor.setPower(0.5);
        //Line 58 commented and line 64 added by NA on 1/15/2025
        leftArmMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);


        foreArmMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        foreArmMotor.setTargetPosition(0);
        foreArmMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        foreArmMotor.setPower(0.5);
        foreArmMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        liftMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        liftMotor.setTargetPosition(0);
        liftMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        liftMotor.setPower(0.5);
        liftMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        double basepower = 0.7;
        double lefty1, leftx1, rightx1;

        waitForStart();

        while (opModeIsActive()) {
            // Gamepad control inputs
            lefty1 = gamepad1.left_stick_y;
            leftx1 = gamepad1.left_stick_x;
            rightx1 = gamepad1.right_stick_x;
            
          
            // Base movement logic
            if (gamepad1.right_bumper) {
                basepower = 0.5; // Low speed mode
            } else {
                basepower = 0.7; // Full power driving
            }
            
            frontLeft.setPower((basepower * -lefty1) + (basepower * leftx1) + basepower * rightx1);
            backRight.setPower((basepower * lefty1) - (basepower * leftx1) + basepower * rightx1);
            frontRight.setPower((basepower * lefty1) + (basepower * leftx1) + basepower * rightx1);
            backLeft.setPower((basepower * lefty1) - (basepower * leftx1) + basepower * -rightx1);

            // Arm control
            if (gamepad2.a) {
                highBasket(1118,-660, 1391 ); // High Basket
            } else if (gamepad2.b) {
                lowBasket(790, -630, 0); // Position 1 650
            } else if (gamepad2.dpad_right) {
                specimenHang(0,0,0); // Position 2 1980
            } else if (gamepad2.dpad_down) {
                specimenPickup(75, -590, 0); //Position 3 1365
            }
              else if (gamepad2.right_bumper) {
                homePosition(0,0,0); //Position 3 1365
            }
            
           /* if (gamepad2.dpad_up) {
                armTarget = ARM_COLLAPSED_INTO_ROBOT ; // Home position 0
            } else if (gamepad2.dpad_left) {
                armTarget = ARM_SCORE_SAMPLE_IN_LOW; // Position 1 650
            } else if (gamepad2.dpad_right) {
                armTarget = ARM_COLLECT; // Position 2 1980
            } else if (gamepad2.dpad_down) {
                armTarget = ARM_PARALLEL_COLLECT; //Position 3 1365
            }

            // Arm Motor control
            if (gamepad2.right_bumper) {
                armMotor.setPower(1); // 100% position
            } else {
                armMotor.setPower(0); // 0% position
            }*/

            // Intake control 
            lastCycle = currCycle;
            currCycle = gamepad2.y;
            
            if (gamepad2.y) {
                move_wrist("home");
            } else if (gamepad2.x) {
                move_wrist("back");
            } else if (gamepad2.b) {
                move_wrist("grab");
            } else if (gamepad2.a) {
                move_wrist("bucket");
            }

            // Claw control 
            lastCycle = currCycle;
            currCycle = gamepad2.left_bumper;

            if (currCycle && !lastCycle) {
                isDown = !isDown;
                if (isDown) {
                    claw.setPosition(0);  
                } else {
                    claw.setPosition(1);
                }
            }

            // Send telemetry data
            telemetry.addData("Left Arm Position", leftArmMotor.getCurrentPosition());
            telemetry.addData("Right Arm Position", rightArmMotor.getCurrentPosition());
            telemetry.addData("Arm Target Position", armTarget);
            telemetry.addData("Base Power", basepower);
            telemetry.addData("Low Power Mode", gamepad1.right_bumper);
            telemetry.update();
        }
    }

    public void move_wrist(String pos) {
        if (pos.equals("home")) {
            intake.setPosition(1);
        } else if (pos.equals("back")) {
            intake.setPosition(0);
        } else if (pos.equals("grab")) {
            intake.setPosition(0.5);
        } else if (pos.equals("bucket")) {
            intake.setPosition(0.8);
        }
    }
public void moveToPositions(int ArmPos, int ForeArmPos, int LiftPos) {
    // Move arm motor to target position
    rightArmMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    rightArmMotor.setTargetPosition(ArmPos);
    rightArmMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    rightArmMotor.setPower(0.5);
    
    leftArmMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    leftArmMotor.setTargetPosition(ArmPos);
    leftArmMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    leftArmMotor.setPower(0.5);

    // Move forearm motor to target position
    foreArmMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    foreArmMotor.setTargetPosition(ForeArmPos);
    foreArmMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    foreArmMotor.setPower(0.5);

    // Move lift motor to target position
    liftMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    liftMotor.setTargetPosition(LiftPos);
    liftMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    liftMotor.setPower(0.5);
}



public void highBasket(int ArmPos, int ForeArmPos, int LiftPos) {
    moveToPositions(ArmPos, ForeArmPos, LiftPos);
}

public void lowBasket(int ArmPos, int ForeArmPos, int LiftPos) {
    moveToPositions(ArmPos, ForeArmPos, LiftPos);
}

public void specimenHang(int ArmPos, int ForeArmPos, int LiftPos) {
    moveToPositions(ArmPos, ForeArmPos, LiftPos);
}
public void specimenPickup(int ArmPos, int ForeArmPos, int LiftPos) {
    moveToPositions(ArmPos, ForeArmPos, LiftPos);
}
public void homePosition(int ArmPos, int ForeArmPos, int LiftPos) {
    moveToPositions(ArmPos, ForeArmPos, LiftPos);
}
}
