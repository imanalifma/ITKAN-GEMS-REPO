package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.Gamepad;

@TeleOp
public class ITKAN_GEMS_TELEOP extends LinearOpMode {
    private DcMotor backLeft;
    private DcMotor backRight;
    private DcMotor frontLeft;
    private DcMotor frontRight;
    private DcMotor armMotor;
    private Servo claw;
    private Servo intake;
    private Servo armServo;
    private int armTarget = 0;
    double joystick;
    boolean isPressed;
    boolean isDown = true;
    boolean lastCycle = false, currCycle = false;
    
    @Override
    public void runOpMode()  {
        // Initialize hardware
        backLeft = hardwareMap.get(DcMotor.class, "bl");
        backRight = hardwareMap.get(DcMotor.class, "br");
        frontLeft = hardwareMap.get(DcMotor.class, "fl");
        frontRight = hardwareMap.get(DcMotor.class, "fr");
        armMotor = hardwareMap.get(DcMotor.class, "leftarm");
        claw = hardwareMap.get(Servo.class, "claw");
        intake = hardwareMap.get(Servo.class, "intake");
           

        // Set motor directions
        frontRight.setDirection(DcMotorSimple.Direction.FORWARD);
        backRight.setDirection(DcMotorSimple.Direction.FORWARD);
        frontLeft.setDirection(DcMotorSimple.Direction.REVERSE);
        backLeft.setDirection(DcMotorSimple.Direction.REVERSE);
        armMotor.setDirection(DcMotorSimple.Direction.REVERSE);

        // Set zero power behavior
        armMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        backLeft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        backRight.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        frontLeft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        frontRight.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        //armMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        //armMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
       // armMotor.setTargetPosition(0);
        //armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        //armMotor.setPower(0.5);
                
        armMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        armMotor.setTargetPosition(0);
        armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        armMotor.setPower(0.5);
        //Line 58 commented and line 64 added by NA on 1/15/2025
        armMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        double basepower = 0.7;
        double lefty1, leftx1, rightx1;

        waitForStart();

        while (opModeIsActive()) {
            
            
            // Arm control
            if (gamepad2.right_bumper) { //0 position
                
                 intake.setPosition(0);
                move_arm(0); 
                claw.setPosition(0.8);
            }
            
            else if (gamepad2.dpad_up) { // Specimen In position
                
                 intake.setPosition(0);
                move_arm(-900); 
                claw.setPosition(0.8);
            }
            
            else if (gamepad2.dpad_left) { // Specimen In position
                
                 intake.setPosition(0);
                move_arm(-600); 
                claw.setPosition(0);
            }
            
            else if (gamepad2.x) { // intake grab Position
                
                claw.setPosition(0); 
                move_arm(-125);
                intake.setPosition(0.77); // grab position
                
                
            } else if (gamepad2.a) { // Gamepad A scoring
                
                move_arm(-1700);
                intake.setPosition(0);
                
            } else if (gamepad2.dpad_right) {
                move_arm(-300);
                intake.setPosition(1);
               
            }
            if (gamepad2.y) { // drive Position
                
                move_arm(-550); // drive position // 600
                intake.setPosition(0);
                //claw.setPosition(0);
            }
           
            // Base movement logic
            
            
            // base code
            double leftx = (gamepad1.left_stick_x);//strafe left and right
            double lefty = (gamepad1.left_stick_y + gamepad1.right_stick_y); // forward and backward
            double rightx = (gamepad1.right_stick_x); // turn left and right


            
            frontLeft.setPower(lefty- leftx - rightx);
            frontRight.setPower(lefty + leftx + rightx);
            backLeft.setPower(lefty + leftx - rightx);
            backRight.setPower(lefty - leftx + rightx);

            
            
            
            // frontLeft.setPower((basepower * -lefty1) + (basepower * leftx1) + basepower * rightx1);
            // backRight.setPower((basepower * lefty1) - (basepower * leftx1) + basepower * rightx1);
            // frontRight.setPower((basepower * lefty1) + (basepower * leftx1) + basepower * rightx1);
            // backLeft.setPower((basepower * lefty1) - (basepower * leftx1) + basepower * -rightx1);


            // Arm Motor control
            

            // Intake control 
           
            
            

            // Claw control 
            lastCycle = currCycle;
            currCycle = gamepad2.b;
            telemetry.addData("Claw Last", lastCycle);
            telemetry.addData("Claw", currCycle);
            if (currCycle && !lastCycle) {
                isDown = !isDown;
                if (isDown) {
                    claw.setPosition(0.1);  
                } else {
                    claw.setPosition(0.8);
                }
            }
            
            /*if (gamepad2.dpad_up) {
                move_wrist("home");
            }  if (gamepad2.dpad_down) {
                move_wrist("back");
            } /*else if (gamepad2.dpad_left) {
                move_wrist("grab");
            } else if (gamepad2.dpad_right) {
                move_wrist("bucket");
            }*/

            // Send telemetry data
            telemetry.addData("Arm Position", armMotor.getCurrentPosition());
            telemetry.addData("Arm Target Position", armTarget);
            telemetry.addData("Base Power", basepower);
            telemetry.addData("Low Power Mode", gamepad1.right_bumper);
            telemetry.update();
        }
    }

    public void move_wrist(String pos) {
        if (pos.equals("home")) {
            intake.setPosition(1);
            telemetry.addData("p", "home");
        } else if (pos.equals("back")) {
            intake.setPosition(0);
            telemetry.addData("p", "back");
        } else if (pos.equals("grab")) {
            intake.setPosition(0.5);
            telemetry.addData("p", "grab");
        } else if (pos.equals("bucket")) {
            intake.setPosition(0.8);
            telemetry.addData("p", "bucket");
        }
    }
  public void move_arm(int armTarget) {
        armMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        armMotor.setTargetPosition(armTarget);
        armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        armMotor.setPower(0.5);
  }  
}

